% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/core.R
\name{benchmark_run}
\alias{benchmark_run}
\title{Run a benchmark for git branches}
\usage{
benchmark_run(
  expr_before_benchmark = {
 },
  ...,
  branches = c(branch_get_or_fail("GITHUB_BASE_REF"),
    branch_get_or_fail("GITHUB_HEAD_REF")),
  n = 100,
  path_pkg = "."
)
}
\arguments{
\item{expr_before_benchmark}{Expression to run before
the benchmark is ran, will be captured with \code{\link[rlang:defusing-advanced]{rlang::enexpr()}}. So you can
use quasiquotation.}

\item{...}{Named expression of length one with code to benchmark,
will be captured with \code{\link[rlang:defusing-advanced]{rlang::enexprs()}}. So you can use quasiquotation.}

\item{branches}{Character vector with branch names to benchmark. The package
must be built for each benchmarked branch beforehand with \code{\link[=branch_install]{branch_install()}}.
The base branch is the target branch of the pull request in a workflow run,
the head branch is the source branch of the pull request in a workflow run.}

\item{n}{Number of times benchmarks should be run for each \code{branch}. The more
iterations you run, the more narrow your confidence interval will be and
the smaller the differences you will detect. See also
\code{vignette("inference")}. To simplify interactive experimentation with
\code{benchmark_run()}, \code{n} will be overridden in interactive usage after the
user calls \code{activate(..., n = 1)}.}

\item{path_pkg}{The path to the package to benchmark. Will be used to
temporarily checkout the branch during benchmarking.}
}
\value{
All timings in a tibble.
}
\description{
Run a benchmark for git branches
}
\details{
Runs the following loop \code{n} times:
\itemize{
\item removes all touchstone libraries from the library path, adding the one
corresponding to \code{branch}.
\item runs setup code \code{exp_before_branch}.
\item benchmarks \code{expr_to_benchmark} and writes them to disk.
}
}
\section{Caution}{

This function will perform various git operations that affect the state of
the directory it is ran in, in particular different branches will be checked
out. Ensure a clean git working directory before invocation.
}

